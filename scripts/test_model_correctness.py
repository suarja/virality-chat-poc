#!/usr/bin/env python3
"""
Test de la correction du mod√®le ML.
V√©rifie que le mod√®le fonctionne correctement apr√®s les corrections.
"""

import requests
import json
import time
import numpy as np


def test_model_predictions():
    """Test des pr√©dictions du mod√®le."""
    print("üß™ Test des pr√©dictions du mod√®le ML")
    print("=" * 50)

    # Test avec diff√©rentes vid√©os
    test_videos = [
        {
            "url": "https://www.tiktok.com/@swarecito/video/7505706702050823446",
            "name": "Vid√©o de test 1"
        }
    ]

    results = []

    for video in test_videos:
        print(f"\nüìπ Test: {video['name']}")
        print(f"üîó URL: {video['url']}")

        url = "http://localhost:8000/analyze-tiktok-url"
        data = {
            "url": video['url'],
            "use_cache": False
        }

        try:
            print("üì§ Envoi de la requ√™te...")
            start_time = time.time()
            response = requests.post(url, json=data, timeout=30)
            end_time = time.time()

            print(f"‚è±Ô∏è  Temps de r√©ponse: {end_time - start_time:.1f}s")

            if response.status_code == 200:
                result = response.json()

                # Extraire les m√©triques importantes
                virality_score = result.get(
                    'prediction', {}).get('virality_score', 0)
                confidence = result.get('prediction', {}).get('confidence', 0)
                gemini_used = result.get('gemini_used', False)

                print(f"‚úÖ Pr√©diction r√©ussie!")
                print(f"   ‚Ä¢ Score viralit√©: {virality_score:.3f}")
                print(f"   ‚Ä¢ Confiance: {confidence:.3f}")
                print(f"   ‚Ä¢ Gemini utilis√©: {gemini_used}")

                # V√©rifications de qualit√©
                checks = []

                # 1. Score dans la plage normale (0-1)
                if 0 <= virality_score <= 1:
                    checks.append("‚úÖ Score dans la plage normale (0-1)")
                else:
                    checks.append(f"‚ùå Score hors plage: {virality_score}")

                # 2. Confiance dans la plage normale (0-1)
                if 0 <= confidence <= 1:
                    checks.append("‚úÖ Confiance dans la plage normale (0-1)")
                else:
                    checks.append(f"‚ùå Confiance hors plage: {confidence}")

                # 3. Pas d'erreur de features
                if "‚ùå Prediction error" not in str(result):
                    checks.append("‚úÖ Aucune erreur de features")
                else:
                    checks.append("‚ùå Erreur de features d√©tect√©e")

                # 4. Pas de warnings de feature names
                if "UserWarning" not in str(result):
                    checks.append("‚úÖ Aucun warning de feature names")
                else:
                    checks.append("‚ùå Warnings de feature names d√©tect√©s")

                # Afficher les v√©rifications
                for check in checks:
                    print(f"   {check}")

                results.append({
                    "video": video['name'],
                    "virality_score": virality_score,
                    "confidence": confidence,
                    "gemini_used": gemini_used,
                    "checks": checks
                })

            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                results.append({
                    "video": video['name'],
                    "error": f"HTTP {response.status_code}"
                })

        except Exception as e:
            print(f"‚ùå Erreur de test: {e}")
            results.append({
                "video": video['name'],
                "error": str(e)
            })

    return results


def test_simulation_scenarios():
    """Test des sc√©narios de simulation."""
    print("\nüéØ Test des sc√©narios de simulation")
    print("=" * 50)

    url = "http://localhost:8000/simulate-virality"
    data = {
        "video_url": "https://www.tiktok.com/@swarecito/video/7505706702050823446",
        "use_cache": False,
        "scenarios": [
            {
                "name": "Matin",
                "description": "Publication √† 9h le lundi",
                "publication_hour": 9,
                "publication_day": "monday",
                "hashtags": ["fyp", "viral"],
                "engagement_multiplier": 1.2
            },
            {
                "name": "Soir",
                "description": "Publication √† 20h le vendredi",
                "publication_hour": 20,
                "publication_day": "friday",
                "hashtags": ["fyp", "comedy"],
                "engagement_multiplier": 1.5
            }
        ]
    }

    try:
        print("üì§ Envoi de la requ√™te de simulation...")
        start_time = time.time()
        response = requests.post(url, json=data, timeout=30)
        end_time = time.time()

        print(f"‚è±Ô∏è  Temps de r√©ponse: {end_time - start_time:.1f}s")

        if response.status_code == 200:
            result = response.json()

            best_score = result.get('best_score', 0)
            scenarios = result.get('scenarios', [])

            print(f"‚úÖ Simulation r√©ussie!")
            print(f"   ‚Ä¢ Meilleur score: {best_score:.3f}")
            print(f"   ‚Ä¢ Sc√©narios test√©s: {len(scenarios)}")

            # V√©rifications de qualit√©
            checks = []

            # 1. Meilleur score dans la plage normale
            if 0 <= best_score <= 1:
                checks.append("‚úÖ Meilleur score dans la plage normale (0-1)")
            else:
                checks.append(f"‚ùå Meilleur score hors plage: {best_score}")

            # 2. Scores des sc√©narios coh√©rents
            scenario_scores = []
            for scenario in scenarios:
                avg_score = scenario.get('average_virality_score', 0)
                scenario_scores.append(avg_score)
                print(f"   ‚Ä¢ {scenario['name']}: {avg_score:.3f}")

            if all(0 <= score <= 1 for score in scenario_scores):
                checks.append(
                    "‚úÖ Tous les scores de sc√©narios dans la plage normale")
            else:
                checks.append("‚ùå Certains scores de sc√©narios hors plage")

            # 3. Pas d'erreur de features
            if "‚ùå Prediction error" not in str(result):
                checks.append("‚úÖ Aucune erreur de features")
            else:
                checks.append("‚ùå Erreur de features d√©tect√©e")

            # Afficher les v√©rifications
            for check in checks:
                print(f"   {check}")

            return {
                "best_score": best_score,
                "scenarios_count": len(scenarios),
                "scenario_scores": scenario_scores,
                "checks": checks
            }

        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return {"error": f"HTTP {response.status_code}"}

    except Exception as e:
        print(f"‚ùå Erreur de test: {e}")
        return {"error": str(e)}


def main():
    """Test principal."""
    print("üß™ Test de la correction du mod√®le ML")
    print("=" * 60)

    # Test 1: Pr√©dictions du mod√®le
    prediction_results = test_model_predictions()

    # Test 2: Sc√©narios de simulation
    simulation_result = test_simulation_scenarios()

    # R√©sum√©
    print("\nüìä R√©sum√© des tests:")
    print("=" * 30)

    # Analyser les r√©sultats des pr√©dictions
    successful_predictions = 0
    total_predictions = len(prediction_results)

    for result in prediction_results:
        if 'error' not in result:
            successful_predictions += 1
            print(
                f"   ‚Ä¢ {result['video']}: Score {result['virality_score']:.3f}")
        else:
            print(f"   ‚Ä¢ {result['video']}: ‚ùå {result['error']}")

    # Analyser les r√©sultats de simulation
    if 'error' not in simulation_result:
        print(f"   ‚Ä¢ Simulation: Score {simulation_result['best_score']:.3f}")
    else:
        print(f"   ‚Ä¢ Simulation: ‚ùå {simulation_result['error']}")

    # √âvaluation globale
    print(f"\nüéØ √âvaluation globale:")
    print(
        f"   ‚Ä¢ Pr√©dictions r√©ussies: {successful_predictions}/{total_predictions}")
    print(
        f"   ‚Ä¢ Simulation: {'‚úÖ' if 'error' not in simulation_result else '‚ùå'}")

    if successful_predictions == total_predictions and 'error' not in simulation_result:
        print("\nüéâ Tous les tests sont pass√©s!")
        print("‚úÖ Le mod√®le ML fonctionne correctement!")
        print("‚úÖ Les scores sont dans la plage normale (0-1)")
        print("‚úÖ Aucune erreur de features d√©tect√©e")
        return 0
    else:
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©.")
        print("V√©rifiez les logs pour plus de d√©tails.")
        return 1


if __name__ == "__main__":
    import sys
    sys.exit(main())
