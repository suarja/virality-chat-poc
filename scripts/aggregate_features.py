#!/usr/bin/env python3
"""
Script pour agr√©ger les features de plusieurs comptes en un seul fichier.
Utile pour combiner les r√©sultats du syst√®me modulaire.
"""
import pandas as pd
import argparse
import logging
from pathlib import Path
from typing import List, Optional


def setup_logging():
    """Setup logging configuration."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)


def aggregate_features(
    dataset_dir: str,
    feature_set: str,
    output_file: Optional[str] = None,
    add_account_column: bool = True
) -> pd.DataFrame:
    """
    Agr√©ger tous les fichiers de features d'un feature set donn√©.

    Args:
        dataset_dir: Chemin vers le dossier du dataset
        feature_set: Nom du feature set (metadata, visual_granular, etc.)
        output_file: Fichier de sortie (optionnel)
        add_account_column: Ajouter une colonne avec le nom du compte

    Returns:
        DataFrame avec toutes les features agr√©g√©es
    """
    logger = logging.getLogger(__name__)

    # Construire le chemin vers le dossier features
    features_dir = Path(dataset_dir) / "features"

    if not features_dir.exists():
        raise FileNotFoundError(f"Dossier features non trouv√©: {features_dir}")

    # Chercher tous les fichiers du feature set
    pattern = f"*_features_{feature_set}.csv"
    feature_files = list(features_dir.glob(pattern))

    if not feature_files:
        raise FileNotFoundError(
            f"Aucun fichier trouv√© pour le pattern: {pattern}")

    logger.info(
        f"Trouv√© {len(feature_files)} fichiers de features pour {feature_set}")

    all_features = []

    for file_path in feature_files:
        try:
            # Extraire le nom du compte du nom de fichier
            account_name = file_path.stem.split('_features_')[0]

            # Charger les features
            df = pd.read_csv(file_path)

            # Ajouter une colonne avec le nom du compte si demand√©
            if add_account_column:
                df['account_name'] = account_name

            all_features.append(df)
            logger.info(f"‚úÖ Charg√© {len(df)} features pour {account_name}")

        except Exception as e:
            logger.error(f"‚ùå Erreur lors du chargement de {file_path}: {e}")
            continue

    if not all_features:
        raise ValueError("Aucune feature charg√©e avec succ√®s")

    # Combiner tous les DataFrames
    aggregated_df = pd.concat(all_features, ignore_index=True)

    logger.info(
        f"‚úÖ Agr√©gation termin√©e: {len(aggregated_df)} features au total")
    logger.info(
        f"   ‚Ä¢ Comptes: {aggregated_df['account_name'].nunique() if add_account_column else 'N/A'}")
    logger.info(f"   ‚Ä¢ Colonnes: {len(aggregated_df.columns)}")

    # Sauvegarder si un fichier de sortie est sp√©cifi√©
    if output_file:
        output_path = Path(output_file)
        aggregated_df.to_csv(output_path, index=False)
        logger.info(f"üíæ Features agr√©g√©es sauvegard√©es dans: {output_path}")

    return aggregated_df


def main():
    """Main function."""
    parser = argparse.ArgumentParser(
        description="Agr√©ger les features de plusieurs comptes en un seul fichier"
    )

    parser.add_argument(
        "--dataset-dir",
        type=str,
        required=True,
        help="Chemin vers le dossier du dataset (ex: data/dataset_mon_dataset)"
    )

    parser.add_argument(
        "--feature-set",
        type=str,
        required=True,
        choices=['metadata', 'gemini_basic',
                 'visual_granular', 'comprehensive'],
        help="Feature set √† agr√©ger"
    )

    parser.add_argument(
        "--output",
        type=str,
        help="Fichier de sortie (optionnel, sinon affichage dans la console)"
    )

    parser.add_argument(
        "--no-account-column",
        action="store_true",
        help="Ne pas ajouter de colonne avec le nom du compte"
    )

    parser.add_argument(
        "--show-stats",
        action="store_true",
        help="Afficher les statistiques des features agr√©g√©es"
    )

    args = parser.parse_args()
    logger = setup_logging()

    try:
        # Agr√©ger les features
        aggregated_df = aggregate_features(
            dataset_dir=args.dataset_dir,
            feature_set=args.feature_set,
            output_file=args.output,
            add_account_column=not args.no_account_column
        )

        # Afficher les statistiques si demand√©
        if args.show_stats:
            logger.info("\nüìä Statistiques des Features Agr√©g√©es:")
            logger.info(f"   ‚Ä¢ Total de features: {len(aggregated_df)}")
            logger.info(f"   ‚Ä¢ Colonnes: {list(aggregated_df.columns)}")

            if 'account_name' in aggregated_df.columns:
                logger.info(
                    f"   ‚Ä¢ Comptes uniques: {aggregated_df['account_name'].unique()}")
                logger.info(f"   ‚Ä¢ Features par compte:")
                for account in aggregated_df['account_name'].unique():
                    count = len(
                        aggregated_df[aggregated_df['account_name'] == account])
                    logger.info(f"     - {account}: {count} features")

        # Afficher un aper√ßu si pas de fichier de sortie
        if not args.output:
            logger.info("\nüëÄ Aper√ßu des Features Agr√©g√©es:")
            print(aggregated_df.head())

        logger.info("‚úÖ Agr√©gation termin√©e avec succ√®s!")

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'agr√©gation: {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
