#!/usr/bin/env python3
"""
üß™ Test du pipeline r√©el TikTok ‚Üí Features ‚Üí Pr√©diction

üéØ DDD Phase 4: Validation de la cha√Æne compl√®te
üìä Teste le vrai scraper Apify + syst√®me de features modulaire
"""
import requests
import json
import time
from typing import Dict, Any

# Configuration
API_BASE_URL = "http://localhost:8000"
TEST_TIKTOK_URL = "https://www.tiktok.com/@tiktok/video/7232187812345678901"  # URL d'exemple
TEST_USERNAME = "tiktok"  # Username d'exemple


def test_health_check():
    """Test du health check"""
    print("üîç Test 1: Health Check")
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check OK")
            print(f"   - Mod√®le ML: {data.get('model_loaded', False)}")
            print(
                f"   - Feature extractor: {data.get('feature_extractor_loaded', False)}")
            print(
                f"   - Feature system: {data.get('feature_system_available', False)}")
            print(
                f"   - TikTok scraper: {data.get('tiktok_scraper_available', False)}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False


def test_api_info():
    """Test des informations API"""
    print("\nüîç Test 2: API Info")
    try:
        response = requests.get(f"{API_BASE_URL}/info")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API info OK")
            print(
                f"   - R¬≤ Score: {data.get('scientific_basis', {}).get('r2_score', 'N/A')}")
            print(
                f"   - Features count: {data.get('scientific_basis', {}).get('features_count', 'N/A')}")
            print(
                f"   - Endpoints disponibles: {len(data.get('endpoints', {}))}")
            return True
        else:
            print(f"‚ùå API info failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå API info error: {e}")
        return False


def test_feature_extraction():
    """Test de l'extraction de features"""
    print("\nüîç Test 3: Feature Extraction")
    try:
        # Test avec des donn√©es de base
        test_data = {
            "duration": 30.0,
            "hashtag_count": 5,
            "text": "Test video #test #viral",
            "playCount": 1000,
            "diggCount": 150,
            "commentCount": 25,
            "shareCount": 10
        }

        response = requests.post(f"{API_BASE_URL}/predict", json=test_data)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Feature extraction OK")
            print(f"   - Virality score: {data.get('virality_score', 'N/A')}")
            print(f"   - Confidence: {data.get('confidence', 'N/A')}")
            print(f"   - R¬≤ Score: {data.get('r2_score', 'N/A')}")
            return True
        else:
            print(f"‚ùå Feature extraction failed: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Feature extraction error: {e}")
        return False


def test_tiktok_url_analysis():
    """Test de l'analyse TikTok par URL"""
    print(f"\nüîç Test 4: TikTok URL Analysis")
    print(f"   URL: {TEST_TIKTOK_URL}")

    try:
        payload = {"url": TEST_TIKTOK_URL}
        response = requests.post(
            f"{API_BASE_URL}/analyze-tiktok-url", json=payload)

        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ TikTok URL analysis OK")
            print(f"   - Status: {data.get('status', 'N/A')}")
            print(f"   - Analysis time: {data.get('analysis_time', 'N/A')}s")
            print(
                f"   - Video data keys: {list(data.get('video_data', {}).keys())}")
            print(f"   - Features count: {len(data.get('features', {}))}")
            print(
                f"   - Prediction score: {data.get('prediction', {}).get('virality_score', 'N/A')}")
            return True
        elif response.status_code == 400:
            print(f"‚ö†Ô∏è TikTok URL analysis - URL invalide (attendu pour URL d'exemple)")
            print(f"   Response: {response.json()}")
            return True  # C'est normal pour une URL d'exemple
        else:
            print(f"‚ùå TikTok URL analysis failed: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå TikTok URL analysis error: {e}")
        return False


def test_tiktok_profile_analysis():
    """Test de l'analyse de profil TikTok"""
    print(f"\nüîç Test 5: TikTok Profile Analysis")
    print(f"   Username: {TEST_USERNAME}")

    try:
        payload = {"username": TEST_USERNAME, "max_videos": 5}
        response = requests.post(
            f"{API_BASE_URL}/analyze-tiktok-profile", json=payload)

        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ TikTok profile analysis OK")
            print(f"   - Status: {data.get('status', 'N/A')}")
            print(f"   - Analysis time: {data.get('analysis_time', 'N/A')}s")
            print(
                f"   - Videos analyzed: {data.get('profile_stats', {}).get('total_videos_analyzed', 'N/A')}")
            print(
                f"   - Average virality: {data.get('profile_stats', {}).get('average_virality_score', 'N/A')}")
            return True
        elif response.status_code == 400:
            print(
                f"‚ö†Ô∏è TikTok profile analysis - Username invalide (attendu pour username d'exemple)")
            print(f"   Response: {response.json()}")
            return True  # C'est normal pour un username d'exemple
        else:
            print(f"‚ùå TikTok profile analysis failed: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå TikTok profile analysis error: {e}")
        return False


def test_complete_pipeline():
    """Test du pipeline complet"""
    print("\nüîç Test 6: Complete Pipeline")
    try:
        # Test avec des donn√©es simul√©es
        test_features = {
            "video_duration": 30.0,
            "estimated_hashtag_count": 5,
            "audience_connection_score": 0.75,
            "color_vibrancy": 0.7,
            "music_energy": 0.8,
            "emotional_trigger_count": 3,
            "hour_of_day": 14,
            "video_duration_optimized": 1.0,
            "viral_potential_score": 0.65,
            "production_quality_score": 0.8
        }

        response = requests.post(f"{API_BASE_URL}/predict", json=test_features)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Complete pipeline OK")
            print(f"   - Virality score: {data.get('virality_score', 'N/A')}")
            print(f"   - Confidence: {data.get('confidence', 'N/A')}")
            print(
                f"   - Recommendations: {len(data.get('recommendations', []))}")
            return True
        else:
            print(f"‚ùå Complete pipeline failed: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Complete pipeline error: {e}")
        return False


def main():
    """Fonction principale de test"""
    print("üöÄ Test du Pipeline R√©el TikTok ‚Üí Features ‚Üí Pr√©diction")
    print("=" * 60)

    # V√©rifier que l'API est accessible
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code != 200:
            print(f"‚ùå API non accessible: {response.status_code}")
            print(
                "   Assurez-vous que l'API est d√©marr√©e: uvicorn src.api.main:app --reload")
            return
    except Exception as e:
        print(f"‚ùå API non accessible: {e}")
        print("   Assurez-vous que l'API est d√©marr√©e: uvicorn src.api.main:app --reload")
        return

    # Tests
    tests = [
        test_health_check,
        test_api_info,
        test_feature_extraction,
        test_tiktok_url_analysis,
        test_tiktok_profile_analysis,
        test_complete_pipeline
    ]

    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Test error: {e}")
            results.append(False)

    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)

    passed = sum(results)
    total = len(results)

    print(f"‚úÖ Tests r√©ussis: {passed}/{total}")
    print(f"‚ùå Tests √©chou√©s: {total - passed}/{total}")

    if passed == total:
        print("üéâ Tous les tests sont pass√©s! Le pipeline r√©el fonctionne correctement.")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les logs ci-dessus.")

    print("\nüìù Notes:")
    print("- Les tests d'URL et profil TikTok peuvent √©chouer avec des URLs d'exemple")
    print("- Pour tester avec de vraies donn√©es, utilisez des URLs TikTok valides")
    print("- Le syst√®me utilise des mocks pour les mod√®les ML si non disponibles")


if __name__ == "__main__":
    main()
