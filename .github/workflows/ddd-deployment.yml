name: 🚀 DDD Deployment - TikTok Virality API

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.12"
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  # Job 1: Tests et Validation
  test:
    name: 🧪 Tests et Validation
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: 🧪 Run API tests
        run: |
          pytest tests/api/ -v --tb=short

      - name: 🧪 Run unit tests
        run: |
          pytest tests/ -v --tb=short

      - name: 📊 Test coverage
        run: |
          pip install pytest-cov
          pytest --cov=src --cov-report=xml

      - name: 📤 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # Job 2: Lint et Code Quality
  lint:
    name: 🔍 Lint et Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install linting tools
        run: |
          pip install flake8 black isort mypy

      - name: 🔍 Run flake8
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🎨 Run black check
        run: |
          black --check src/ tests/

      - name: 📝 Run isort check
        run: |
          isort --check-only src/ tests/

      - name: 🔍 Run mypy
        run: |
          mypy src/ --ignore-missing-imports

  # Job 3: DDD Step Detection
  ddd-step:
    name: 🎯 DDD Step Detection
    runs-on: ubuntu-latest
    needs: [test, lint]
    outputs:
      step: ${{ steps.detect.outputs.step }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🎯 Detect DDD step
        id: detect
        run: |
          # Analyser le commit message pour détecter l'étape DDD
          COMMIT_MSG="${{ github.event.head_commit.message }}"

          if [[ "$COMMIT_MSG" == *"DDD Step 1"* ]] || [[ "$COMMIT_MSG" == *"Health Check"* ]]; then
            echo "step=1" >> $GITHUB_OUTPUT
            echo "🎯 DDD Step 1 detected: Health Check API"
          elif [[ "$COMMIT_MSG" == *"DDD Step 2"* ]] || [[ "$COMMIT_MSG" == *"Feature Extraction"* ]]; then
            echo "step=2" >> $GITHUB_OUTPUT
            echo "🎯 DDD Step 2 detected: Feature Extraction API"
          elif [[ "$COMMIT_MSG" == *"DDD Step 3"* ]] || [[ "$COMMIT_MSG" == *"Model Prediction"* ]]; then
            echo "step=3" >> $GITHUB_OUTPUT
            echo "🎯 DDD Step 3 detected: Model Prediction API"
          elif [[ "$COMMIT_MSG" == *"DDD Step 4"* ]] || [[ "$COMMIT_MSG" == *"Full Pipeline"* ]]; then
            echo "step=4" >> $GITHUB_OUTPUT
            echo "🎯 DDD Step 4 detected: Full Pipeline API"
          else
            echo "step=1" >> $GITHUB_OUTPUT
            echo "🎯 Default to DDD Step 1: Health Check API"
          fi

  # Job 4: Deploy to Railway
  deploy:
    name: 🚀 Deploy to Railway
    runs-on: ubuntu-latest
    needs: [ddd-step]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚂 Deploy to Railway
        uses: bervProject/railway-deploy@v1.0.0
        with:
          railway_token: ${{ env.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE }}

      - name: ⏳ Wait for deployment
        run: |
          echo "⏳ Waiting 30 seconds for Railway deployment..."
          sleep 30

      - name: 🧪 Test deployment
        run: |
          # Récupérer l'URL Railway
          RAILWAY_URL=$(railway domain)
          echo "🌐 Railway URL: $RAILWAY_URL"

          # Test health check
          curl -f "$RAILWAY_URL/health" || exit 1
          echo "✅ Health check passed"

          # Test info endpoint
          curl -f "$RAILWAY_URL/info" || exit 1
          echo "✅ Info endpoint passed"

          # Test selon l'étape DDD
          DDD_STEP="${{ needs.ddd-step.outputs.step }}"
          echo "🎯 Testing DDD Step $DDD_STEP"

          if [ "$DDD_STEP" = "1" ]; then
            echo "✅ DDD Step 1: Health Check API deployed successfully"
          elif [ "$DDD_STEP" = "2" ]; then
            # Test feature extraction (mock)
            curl -f "$RAILWAY_URL/extract-features" || echo "⚠️ Feature extraction not yet implemented"
          elif [ "$DDD_STEP" = "3" ]; then
            # Test prediction (mock)
            curl -X POST "$RAILWAY_URL/predict" \
              -H "Content-Type: application/json" \
              -d '{"test": true}' || echo "⚠️ Prediction not yet implemented"
          elif [ "$DDD_STEP" = "4" ]; then
            # Test full pipeline (mock)
            curl -f "$RAILWAY_URL/analyze" || echo "⚠️ Full pipeline not yet implemented"
          fi

  # Job 5: Notifications
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "🎉 DDD Deployment Summary"
          echo "========================"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "DDD Step: ${{ needs.ddd-step.outputs.step }}"
          echo "Status: ${{ needs.deploy.result }}"

          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
